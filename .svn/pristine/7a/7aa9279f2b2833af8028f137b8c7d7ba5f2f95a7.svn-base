/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ir.srn.ipl.jvircam;

import javax.media.j3d.Transform3D;
import javax.vecmath.Matrix3d;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

/**
 *
 * @author sr
 */
public class Projection {

    private static final double EPS = 1.0e-6;
    private final Matrix3d K;
    private final Matrix3d R;
    private final Vector3d T;
    private final Transform3D P;

    public Projection() {
        K = new Matrix3d();
        R = new Matrix3d();
        T = new Vector3d();
        P = new Transform3D();

        K.setIdentity();
        R.setIdentity();
        T.set(0, 0, 0);
        P.setIdentity();
    }

    private Projection(Matrix3d K, Matrix3d R, Vector3d T) {
        this.K = K;
        this.R = R;
        this.T = T;
        Matrix3d KR = new Matrix3d(K);
        KR.mul(R);
        Vector3d KT = new Vector3d(T);
        K.transform(KT);

        P = new Transform3D();
        P.setIdentity();
        P.setRotation(KR);
        P.setTranslation(KT);
    }

    public Projection withK(Matrix3d K) {
        return new Projection(new Matrix3d(K), R, T);
    }

    public Projection withR(Matrix3d R) {
        return new Projection(K, new Matrix3d(R), T);
    }

    public Projection withT(Vector3d T) {
        return new Projection(K, R, new Vector3d(T));
    }

    public void transform(Point3d p) {
        P.transform(p);
        if (Math.abs(p.z) < EPS) { // point at infinity
            if (p.z < 0) {
                p.scale(-1);
            }
            p.z = 0;
        } else {
            p.scale(1.0 / p.z);
        }
    }

    @Override
    public String toString() {
        return P.toString();
    }

    public static void main(String[] args) {
        Projection p = new Projection();
        p = p.withK(new Matrix3d(100, 0, 500, 0, 100, 400, 0, 0, 1));
        p = p.withT(new Vector3d(0, 0, -4));
        System.out.println(p);
        Point3d a = new Point3d(0, 0, 0);
        p.transform(a);
        System.out.println(a);


        Matrix3d m = new Matrix3d();
        m.rotY(Math.PI / 2);
        System.out.println(m);
        Point3d b = new Point3d(0, 0, 1);
        m.transform(b);
        System.out.println(b);
    }
}
